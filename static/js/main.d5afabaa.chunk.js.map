{"version":3,"sources":["utils/checkBoardSolvability.ts","utils/shufleBoardFisherYates.ts","utils/mapBoard.ts","utils/getBoardWithStatus.ts","utils/getSolvableShuffledBoard.ts","utils/getDefaultBoard.ts","components/Board/Board.tsx","components/Board/index.ts","components/Swipe/Swipe.tsx","components/Swipe/index.ts","utils/theame.ts","components/Tile/styles.ts","components/Tile/Tile.tsx","components/Tile/index.ts","components/Game/styles.ts","components/Game/Game.tsx","components/Game/index.ts","utils/mapArrowKey.ts","serviceWorker.ts","index.tsx"],"names":["isEven","number","Math","floor","isOdd","checkBoardSolvability","board","N","length","indexOfMain","reduce","acc","row","findIndex","el","isMain","getIndexOfMain","computedArr","computedRow","map","x","y","fromMatrixToComputedArr","posOfMainFromBottomAtMatrix","inversion","arr","arrEl","index","slice","accumulator","elem","getInversionCount","conditionOne","conditionTwo","conditionTwoSubOne","conditionTwoSubTwo","shufleBoardFisherYates","i","j","m","random","n","temp","callback","val","item","getBoardWithStatus","mapBoard","isRight","getSolvableShuffledBoard","targetBoard","isSolved","getDefaultBoard","Array","from","boardActionTypeConstants","initialState","enabled","BoardContext","React","createContext","state","dispatch","boardReducer","action","payload","type","Error","BoardProvider","children","useReducer","contextValue","useMemo","Provider","value","Swipe","onChangeGameState","nodeName","detectTouch","onSwipedLeft","keyCode","onSwipedRight","onSwipedDown","onSwipedUp","colors","Second","Right","Item","styled","div","status","setBgColor","TileComponent","Tile","Main","Button","ButtonHover","Nav","nav","Btn","button","Container","Game","containerRef","useRef","useContext","swapHandler","offsetX","offsetY","main","mainCell","targetCell","newBoard","swapArrayElem","swapItems","key","right","left","top","bottom","mapArrowKey","handleChangeGameState","ev","isWin","flat","every","alert","onClick","current","focus","ref","onKeyDown","tabIndex","tileStatus","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d5afabaa.chunk.js","sourcesContent":["import type { BoardCell } from \"../components/Board\";\n\nconst getIndexOfMain = (board: BoardCell[][]) => board\n    .reduce((acc, row) => [ ...acc, ...row ], [])\n    .findIndex((el) => el.isMain); // TODO move to board.flat(1).findIndex(...)\n\nconst fromMatrixToComputedArr = (board: BoardCell[][]) => board.reduce((acc: number[], row) => {\n    const computedRow = row.map((el) => el.x + el.y * board.length + 1);\n\n    return [ ...acc, ...computedRow ];\n}, []);\n\nconst getInversionCount = (arr: number[], N: number) => arr.reduce((acc, arrEl, index) => {\n    if (arrEl !== N ** 2) {\n        const slicedArr = arr.slice(index + 1);\n\n        return (\n            acc\n                + slicedArr.reduce(\n                    (accumulator, elem) => (arrEl < elem && arrEl !== 16 ? accumulator : accumulator + 1),\n                    0\n                )\n        );\n    }\n\n    return acc;\n}, 0);\n\nconst isEven = (number: number) => Math.floor(number / 2) === number / 2;\nconst isOdd = (number: number) => !isEven(number);\n\nexport default function checkBoardSolvability(board: BoardCell[][]) {\n    const N = board.length;\n    const indexOfMain = getIndexOfMain(board);\n    const computedArr = fromMatrixToComputedArr(board);\n\n    const posOfMainFromBottomAtMatrix = N - Math.floor(indexOfMain / N);\n    const inversion = getInversionCount(computedArr, N);\n\n    const conditionOne = isOdd(N) && isEven(inversion);\n    const conditionTwo = isEven(N);\n    const conditionTwoSubOne = isOdd(posOfMainFromBottomAtMatrix) && isEven(inversion);\n    const conditionTwoSubTwo = isEven(posOfMainFromBottomAtMatrix) && isOdd(inversion);\n\n    return conditionOne || (conditionTwo && (conditionTwoSubOne || conditionTwoSubTwo));\n}\n\n// const st = [\n//     [ { x: 0, y: 3 }, { x: 1, y: 0 }, { x: 1, y: 2 }, { x: 2, y: 0 } ],\n//     [ { x: 0, y: 0 }, { x: 3, y: 2 }, { x: 3, y: 1 }, { x: 3, y: 0 } ],\n//     [ { x: 0, y: 1 }, { x: 3, y: 3, main: true }, { x: 0, y: 2 }, { x: 1, y: 1 } ],\n//     [ { x: 2, y: 3 }, { x: 1, y: 3 }, { x: 2, y: 2 }, { x: 2, y: 1 } ]\n// ];\n\n// const stSec = [\n//     [ { x: 1, y: 1 }, { x: 0, y: 3 }, { x: 2, y: 1 }, { x: 1, y: 2 } ],\n//     [ { x: 3, y: 1 }, { x: 0, y: 2 }, { x: 2, y: 2 }, { x: 3, y: 3, main: true } ],\n//     [ { x: 2, y: 3 }, { x: 1, y: 0 }, { x: 3, y: 2 }, { x: 0, y: 1 } ],\n//     [ { x: 1, y: 3 }, { x: 2, y: 0 }, { x: 0, y: 0 }, { x: 3, y: 0 } ]\n// ];\n\n// const stThird = [\n//     [ { x: 2, y: 0 }, { x: 0, y: 2 }, { x: 0, y: 0 }, { x: 2, y: 3 } ],\n//     [ { x: 1, y: 3 }, { x: 2, y: 2 }, { x: 3, y: 0 }, { x: 1, y: 1 } ],\n//     [ { x: 0, y: 3 }, { x: 3, y: 3, main: true }, { x: 1, y: 2 }, { x: 3, y: 2 } ],\n//     [ { x: 1, y: 0 }, { x: 2, y: 1 }, { x: 3, y: 1 }, { x: 0, y: 1 } ]\n// ];\n","import type { BoardCell } from \"../components/Board\";\n\nexport default function shufleBoardFisherYates(board: BoardCell[][]) {\n    // eslint-disable-next-line no-plusplus\n    for (let i = board.length - 1; i > 0; i--) {\n        // eslint-disable-next-line no-plusplus\n        for (let j = board.length - 1; j > 0; j--) {\n            const m = Math.floor(Math.random() * i);\n            const n = Math.floor(Math.random() * j);\n            const temp = board[i][j];\n\n            /* eslint-disable */\n            board[i][j] = board[m][n];\n            board[m][n] = temp;\n            /* eslint-enable */\n        }\n    }\n\n    return board;\n}\n","import type { BoardCell } from \"../components/Board\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Callback = (...args: any[]) => any; // TODO remove any\n\nexport default (board: BoardCell[][], callback: Callback) => board\n    .map((val, y) => val.map((item, x) => callback(item, y, x)));\n","import mapBoard from \"./mapBoard\";\nimport type { BoardCell } from \"../components/Board\";\n\nexport default function getBoardWithStatus(board: BoardCell[][]) {\n    return mapBoard(board, (item, y, x) => ({\n        ...item,\n        isRight : item.x === x && item.y === y\n    }));\n}\n","import checkBoardSolvability from \"./checkBoardSolvability\";\nimport shufleBoardFisherYates from \"./shufleBoardFisherYates\";\nimport getBoardWithStatus from \"./getBoardWithStatus\";\nimport type { BoardCell } from \"../components/Board\";\n\nexport default function getSolvableShuffledBoard(targetBoard: BoardCell[][]) {\n    let board = shufleBoardFisherYates(targetBoard);\n\n    let isSolved = checkBoardSolvability(board);\n\n    while (!isSolved) {\n        board = shufleBoardFisherYates(board);\n        isSolved = checkBoardSolvability(board);\n    }\n\n    return getBoardWithStatus(board);\n}\n","export default function getDefaultBoard() {\n    const board = Array.from(Array(4), (val, y) => Array.from(Array(4), (item, x) => ({\n        number  : x + y * 4 + 1,\n        y,\n        x,\n        isRight : true,\n        isMain  : false\n    })));\n\n    board[3][3].isMain = true;\n\n    return board;\n}\n","import React, { useReducer, useMemo } from \"react\";\nimport getSolvableShuffledBoard from \"../../utils/getSolvableShuffledBoard\";\nimport getDefaultBoard from \"../../utils/getDefaultBoard\";\n\nexport type BoardActionType = \"BREAK_GAME\" | \"SET_STATE\" | \"INIT_GAME\";\nexport type BoardActionTypeConstants = { [key: string]: BoardActionType };\nexport type BoardAction = {\n    type: BoardActionType;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    payload?: any; // TODO remove any\n};\n\nexport type BoardProviderProps = {\n    children: React.ReactNode;\n};\n\nexport type BoardCell = {\n    number: number;\n    x: number;\n    y: number;\n    isMain: boolean;\n    isRight: boolean;\n};\n\nexport type BoardContextValue = {\n    state: BoardReducerState;\n    dispatch: React.Dispatch<BoardAction>;\n};\n\nexport type BoardReducerState = {\n    enabled: boolean;\n    board: BoardCell[][];\n};\n\nexport type BoardInitialState = {\n    enabled: boolean;\n    board: BoardCell[][];\n};\n\nexport const boardActionTypeConstants: BoardActionTypeConstants = {\n    BREAK_GAME : \"BREAK_GAME\",\n    SET_STATE  : \"SET_STATE\",\n    INIT_GAME  : \"INIT_GAME\"\n};\n\nexport const initialState = {\n    enabled : false,\n    board   : getDefaultBoard()\n};\n\nexport const BoardContext = React.createContext<{\n    state: BoardInitialState;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    dispatch: React.Dispatch<any>; // TODO remove any\n}>({\n    state    : initialState,\n    dispatch : () => null\n});\n\nfunction boardReducer(state: BoardReducerState, action: BoardAction) {\n    const { enabled, board } = action.payload || {};\n\n    switch (action.type) {\n        case boardActionTypeConstants.INIT_GAME:\n            return {\n                enabled : true,\n                board   : getSolvableShuffledBoard(getDefaultBoard())\n            };\n        case boardActionTypeConstants.BREAK_GAME:\n            return {\n                enabled : false,\n                board   : getDefaultBoard()\n            };\n        case boardActionTypeConstants.SET_STATE:\n            return { enabled, board };\n        default:\n            throw new Error();\n    }\n}\n\nfunction BoardProvider({ children }: BoardProviderProps) {\n    const [ state, dispatch ] = useReducer(boardReducer, initialState);\n    const contextValue = useMemo(() => ({ state, dispatch }), [ state, dispatch ]);\n\n    return <BoardContext.Provider value={contextValue}>{children}</BoardContext.Provider>;\n}\n\nexport default BoardProvider;\n","import BoardProvider from \"./Board\";\n\nexport type {\n    BoardAction,\n    BoardCell,\n    BoardReducerState,\n    BoardActionType,\n    BoardActionTypeConstants,\n    BoardProviderProps,\n    BoardContextValue\n} from \"./Board\";\n\nexport { BoardContext, boardActionTypeConstants } from \"./Board\";\n\nexport default BoardProvider;\n","import React from \"react\";\nimport { Swipe as SwipeBase } from \"react-swipe-component\";\n\ntype SwipeProps = {\n    children: React.ReactNode;\n    onChangeGameState: (args: Pick<React.KeyboardEvent, \"keyCode\">) => unknown;\n};\n\nfunction Swipe({ children, onChangeGameState }: SwipeProps) {\n    const handleSwipeLeftListener = () => onChangeGameState({ keyCode: 37 }); // ---- LEFT -----\n    const handleSwipeDownListener = () => onChangeGameState({ keyCode: 40 }); // ---- TOP ------\n    const handleSwipeRightListener = () => onChangeGameState({ keyCode: 39 }); // ---- RIGHT ---\n    const handleSwipeUpListener = () => onChangeGameState({ keyCode: 38 }); // ---- DOWN -------\n\n    return (\n        <SwipeBase\n            nodeName=\"div\"\n            detectTouch\n            onSwipedLeft={handleSwipeLeftListener}\n            onSwipedRight={handleSwipeRightListener}\n            onSwipedDown={handleSwipeDownListener}\n            onSwipedUp={handleSwipeUpListener}\n        >\n            {children}\n        </SwipeBase>\n    );\n}\n\nexport default Swipe;\n","import Swipe from \"./Swipe\";\n\nexport default Swipe;\n","export const colors = {\n    Main        : \"darkorange\",\n    Second      : \"white\",\n    Item        : \"#fe9802\",\n    Right       : \"green\",\n    Button      : \"#804600\",\n    ButtonHover : \"#552f00\"\n};\n","import styled from \"styled-components\";\nimport { colors } from \"../../utils/theame\";\nimport type { TileStatus } from \"./Tile\";\n\nconst { Second, Right, Item } = colors;\n\ntype StyledTileProps = {\n    status: TileStatus;\n};\n\nfunction setBgColor(status: TileStatus) {\n    switch (status) {\n        case \"default\":\n            return Item;\n        case \"main\":\n            return Second;\n        case \"right\":\n            return Right;\n        default:\n            break;\n    }\n\n    throw new Error(\"setBgColor Error\");\n}\n\nexport default styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    box-sizing: border-box;\n    width: 25%;\n    height: 25%;\n    border: 2.5px solid white;\n    font-size: 1rem;\n    background-color: ${({ status }: StyledTileProps) => setBgColor(status)};\n`;\n","/* eslint-disable import/no-cycle */\nimport React from \"react\";\nimport Tile from \"./styles\";\n\nexport type TileStatus = \"default\" | \"main\" | \"right\";\n\ntype TileComponent = {\n    children: React.ReactNode;\n    status: TileStatus;\n};\n\nfunction TileComponent({ children, status }: TileComponent) {\n    return <Tile status={status}>{children}</Tile>;\n}\n\nexport default TileComponent;\n","import Tile from \"./Tile\";\n\nexport default Tile;\n","import styled from \"styled-components\";\nimport { colors } from \"../../utils/theame\";\n\nconst { Second, Main, Button, ButtonHover } = colors;\n\nexport const Nav = styled.nav`\n    display: flex;\n`;\n\nexport const Btn = styled.button`\n    box-sizing: border-box;\n    border: none;\n    padding: 10px;\n    margin: 15px;\n    background-color: ${Button};\n    color: ${Second};\n    cursor: pointer;\n\n    &:hover {\n        background-color: ${ButtonHover};\n    }\n`;\n\ntype HasTabIndexStyledSystemProps = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    tabIndex?: any; // FIXME\n};\n\nexport const Container = styled.div<HasTabIndexStyledSystemProps>`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-wrap: wrap;\n    user-select: none;\n    width: 40vh;\n    height: 40vh;\n    background-color: ${Second};\n    border: 1px solid ${Main};\n    box-shadow: 2px 2px 10px ${Main};\n`;\n","import React, { useContext, useRef } from \"react\";\n\nimport Swipe from \"../Swipe\";\nimport mapArrowKey from \"../../utils/mapArrowKey\";\nimport Tile from \"../Tile\";\nimport { Container, Btn, Nav } from \"./styles\";\nimport { BoardContext, BoardCell, boardActionTypeConstants } from \"../Board\";\nimport mapBoard from \"../../utils/mapBoard\";\nimport getBoardWithStatus from \"../../utils/getBoardWithStatus\";\nimport { TileStatus } from \"../Tile/Tile\";\nimport {} from \"styled-components\";\n\ntype Offset = 1 | 0 | -1;\n\nfunction Game() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const containerRef: React.RefObject<any> = useRef(null); // TODO  remove any\n    const { state, dispatch } = useContext(BoardContext);\n\n    const handleStartGame = () => {\n        if (containerRef?.current) containerRef.current.focus();\n\n        dispatch({ type: boardActionTypeConstants.INIT_GAME });\n    };\n\n    const handleBreakGame = () => dispatch({ type: boardActionTypeConstants.BREAK_GAME });\n\n    const swapArrayElem = (\n        board: BoardCell[][],\n        mainCell: Pick<BoardCell, \"x\" | \"y\">,\n        targetCell: Pick<BoardCell, \"x\" | \"y\">\n    ) => {\n        const newBoard = mapBoard(board, (item) => ({ ...item }));\n\n        [ newBoard[mainCell.y][mainCell.x], newBoard[targetCell.y][targetCell.x] ] = [\n            { ...newBoard[targetCell.y][targetCell.x] },\n            newBoard[mainCell.y][mainCell.x]\n        ];\n\n        return newBoard;\n    };\n\n    const swapHandler = (offsetX: Offset, offsetY: Offset) => {\n        let main;\n\n        // eslint-disable-next-line\n        for (let y = 0; y < state.board.length; y++) {\n            // eslint-disable-next-line\n            for (let x = 0; x < state.board[y].length; x++) {\n                if (state.board[y][x].isMain) {\n                    main = { y, x };\n                    break;\n                }\n            }\n        }\n\n        if (!main) throw new Error(\"findMain error\");\n\n        const item: Pick<BoardCell, \"x\" | \"y\"> = {\n            x : main.x + offsetX,\n            y : main.y + offsetY\n        };\n\n        if (item.y < 4 && item.y > -1 && item.x < 4 && item.x > -1) {\n            return swapArrayElem(state.board, main, item);\n        }\n\n        return state.board;\n    };\n\n    const swapItems = (key: number): BoardCell[][] => mapArrowKey(key, {\n        top    : () => swapHandler(0, -1),\n        bottom : () => swapHandler(0, 1),\n        right  : () => swapHandler(1, 0),\n        left   : () => swapHandler(-1, 0)\n    });\n\n    const handleChangeGameState = (ev: Pick<React.KeyboardEvent, \"keyCode\">): void => {\n        if (state.enabled && ev.keyCode <= 40 && ev.keyCode >= 37) {\n            const board = getBoardWithStatus(swapItems(ev.keyCode));\n            const isWin = board.flat(1).every((el) => el.isRight);\n\n            dispatch({\n                type    : boardActionTypeConstants.SET_STATE,\n                payload : { enabled: !isWin, board }\n            });\n\n            // eslint-disable-next-line no-alert\n            if (isWin) alert(\"YOU ARE WIN A GAME!!!\");\n        }\n    };\n\n    const generateItems = () => state.board.map((val: BoardCell[]) => val.map((item: BoardCell) => {\n        const number = item.x + item.y * 4 + 1;\n\n        let tileStatus: TileStatus = \"default\";\n\n        if (item.isMain) tileStatus = \"main\";\n        else if (item.isRight) tileStatus = \"right\";\n\n        return (\n            <Tile key={number} status={tileStatus}>\n                {number}\n            </Tile>\n        );\n    }));\n\n    return (\n        <>\n            <h1>15-puzzle</h1>\n            <Nav>\n                <Btn onClick={handleStartGame}>#shuffleGame</Btn>\n                <Btn onClick={handleBreakGame}>#breakGame</Btn>\n            </Nav>\n            <div>\n                <Swipe onChangeGameState={handleChangeGameState}>\n                    <Container ref={containerRef} onKeyDown={handleChangeGameState} tabIndex=\"0\">\n                        {generateItems()}\n                    </Container>\n                </Swipe>\n            </div>\n        </>\n    );\n}\n\nexport default Game;\n","import Game from \"./Game\";\n\nexport default Game;\n","import { BoardCell } from \"../components/Board\";\n\ntype ArrowsFunction = {\n    right: () => BoardCell[][];\n    left: () => BoardCell[][];\n    top: () => BoardCell[][];\n    bottom: () => BoardCell[][];\n};\n\nexport default (key: number, {\n    right,\n    left,\n    top,\n    bottom\n}: ArrowsFunction) => {\n    switch (key) {\n        // ---- LEFT -------\n        case 37:\n            return left();\n\n        // ---- TOP --------\n        case 38:\n            return top();\n\n        // ---- RIGHT ------\n        case 39:\n            return right();\n\n        // ---- DOWN -------\n        case 40:\n            return bottom();\n\n        default:\n            break;\n    }\n\n    throw new Error(\"mapArrowKey errer\");\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\"\n        // [::1] is the IPv6 localhost address.\n        || window.location.hostname === \"[::1]\"\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \"\n                            + \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \"\n                                    + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers : { \"Service-Worker\": \"script\" }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import \"./index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Board from \"./components/Board\";\nimport Game from \"./components/Game\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render((\n    <React.StrictMode>\n        <Board>\n            <Game />\n        </Board>\n    </React.StrictMode>\n),\ndocument.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}