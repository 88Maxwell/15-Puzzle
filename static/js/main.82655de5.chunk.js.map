{"version":3,"sources":["components/Board/BoardContext.js","utils/checkBoardSolvability.js","utils/shufleBoardFisherYates.js","utils/mapBoard.js","utils/getBoardWithStatus.js","utils/getSolvableShuffledBoard.js","utils/getDefaultBoard.js","components/Board/BoardProvider.js","components/Board/index.js","components/Swipe/Swipe.js","components/Swipe/index.js","utils/theame.js","components/Tile/styles.js","components/Tile/Tile.js","components/Tile/index.js","components/Game/styles.js","components/Game/Game.js","components/Game/index.js","utils/mapArrowKey.js","serviceWorker.js","index.js"],"names":["React","createContext","isEven","number","Math","floor","isOdd","checkBoardSolvability","board","N","length","indexOfMain","reduce","acc","row","findIndex","el","main","computedArr","matrix","computedRow","map","x","y","fromMatrixToComputedArr","posOfMainFromBottomAtMatrix","inversion","arr","arrEl","index","slice","accumulator","elem","getInversionCount","conditionOne","conditionTwo","conditionTwoSubOne","conditionTwoSubTwo","shufleBoardFisherYates","i","j","m","random","n","temp","gameState","callback","val","item","getBoardWithStatus","mapBoard","isRight","getSolvableShuffledBoard","targetBoard","isSolved","getDefaultBoard","Array","from","boardActionTypes","BREAK_GAME","SET_STATE","INIT_GAME","boardReducer","state","action","payload","enabled","type","Error","BoardProvider","children","useReducer","dispatch","contextValue","useMemo","actionTypes","BoardContext","Provider","value","Swipe","onChangeGameState","nodeName","detectTouch","onSwipedLeft","keyCode","onSwipedRight","onSwipedDown","onSwipedUp","colors","Second","Right","Item","styled","div","TileComponent","Tile","Main","Button","ButtonHover","Nav","nav","Btn","button","Container","Game","containerRef","useRef","useContext","swapHandler","offsetX","offsetY","a","b","newBoard","swapArrayElem","swapItems","key","right","left","top","bottom","mapArrowKey","handleChangeGameState","ev","isWin","flat","every","alert","onClick","current","focus","ref","onKeyDown","tabIndex","tileState","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","Board","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.82655de5.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default React.createContext();\n\n","const getIndexOfMain = (matrix) => matrix.reduce((acc, row) => [ ...acc, ...row ], []).findIndex((el) => el.main);\n\nconst fromMatrixToComputedArr = (matrix) => matrix.reduce((acc, row) => {\n    const computedRow = row.map((el) => el.x + el.y * matrix.length + 1);\n\n    return [ ...acc, ...computedRow ];\n}, []);\n\nconst getInversionCount = (arr, N) => arr.reduce((acc, arrEl, index) => {\n    if (arrEl !== N ** 2) {\n        const slicedArr = arr.slice(index + 1);\n\n        return (\n            acc\n                + slicedArr.reduce(\n                    (accumulator, elem) => (arrEl < elem && arrEl !== 16 ? accumulator : accumulator + 1),\n                    0\n                )\n        );\n    }\n\n    return acc;\n}, 0);\n\nconst isEven = (number) => Math.floor(number / 2) === number / 2;\nconst isOdd = (number) => !isEven(number);\n\nexport default function checkBoardSolvability(board) {\n    const N = board.length;\n    const indexOfMain = getIndexOfMain(board);\n    const computedArr = fromMatrixToComputedArr(board);\n\n    const posOfMainFromBottomAtMatrix = N - Math.floor(indexOfMain / N);\n    const inversion = getInversionCount(computedArr, N);\n\n    const conditionOne = isOdd(N) && isEven(inversion);\n    const conditionTwo = isEven(N);\n    const conditionTwoSubOne = isOdd(posOfMainFromBottomAtMatrix) && isEven(inversion);\n    const conditionTwoSubTwo = isEven(posOfMainFromBottomAtMatrix) && isOdd(inversion);\n\n    return conditionOne || (conditionTwo && (conditionTwoSubOne || conditionTwoSubTwo));\n}\n\n\n// const st = [\n//     [ { x: 0, y: 3 }, { x: 1, y: 0 }, { x: 1, y: 2 }, { x: 2, y: 0 } ],\n//     [ { x: 0, y: 0 }, { x: 3, y: 2 }, { x: 3, y: 1 }, { x: 3, y: 0 } ],\n//     [ { x: 0, y: 1 }, { x: 3, y: 3, main: true }, { x: 0, y: 2 }, { x: 1, y: 1 } ],\n//     [ { x: 2, y: 3 }, { x: 1, y: 3 }, { x: 2, y: 2 }, { x: 2, y: 1 } ]\n// ];\n\n// const stSec = [\n//     [ { x: 1, y: 1 }, { x: 0, y: 3 }, { x: 2, y: 1 }, { x: 1, y: 2 } ],\n//     [ { x: 3, y: 1 }, { x: 0, y: 2 }, { x: 2, y: 2 }, { x: 3, y: 3, main: true } ],\n//     [ { x: 2, y: 3 }, { x: 1, y: 0 }, { x: 3, y: 2 }, { x: 0, y: 1 } ],\n//     [ { x: 1, y: 3 }, { x: 2, y: 0 }, { x: 0, y: 0 }, { x: 3, y: 0 } ]\n// ];\n\n// const stThird = [\n//     [ { x: 2, y: 0 }, { x: 0, y: 2 }, { x: 0, y: 0 }, { x: 2, y: 3 } ],\n//     [ { x: 1, y: 3 }, { x: 2, y: 2 }, { x: 3, y: 0 }, { x: 1, y: 1 } ],\n//     [ { x: 0, y: 3 }, { x: 3, y: 3, main: true }, { x: 1, y: 2 }, { x: 3, y: 2 } ],\n//     [ { x: 1, y: 0 }, { x: 2, y: 1 }, { x: 3, y: 1 }, { x: 0, y: 1 } ]\n// ];\n","export default function shufleBoardFisherYates(board) {\n    // eslint-disable-next-line no-plusplus\n    for (let i = board.length - 1; i > 0; i--) {\n        // eslint-disable-next-line no-plusplus\n        for (let j = board.length - 1; j > 0; j--) {\n            const m = Math.floor(Math.random() * i);\n            const n = Math.floor(Math.random() * j);\n            const temp = board[i][j];\n\n            /* eslint-disable */\n            board[i][j] = board[m][n];\n            board[m][n] = temp;\n            /* eslint-enable */\n        }\n    }\n\n    return board;\n}\n","export default (gameState, callback) => gameState.map((val, y) => val.map((item, x) => callback(item, y, x)));\n","import mapBoard from \"./mapBoard\";\n\nexport default function getBoardWithStatus(board) {\n    return mapBoard(board, (item, y, x) => ({\n        ...item,\n        isRight : item.x === x && item.y === y\n    }));\n}\n","import checkBoardSolvability from \"./checkBoardSolvability\";\nimport shufleBoardFisherYates from \"./shufleBoardFisherYates\";\nimport getBoardWithStatus from \"./getBoardWithStatus\";\n\nexport default function getSolvableShuffledBoard(targetBoard) {\n    let board = shufleBoardFisherYates(targetBoard);\n\n    let isSolved = checkBoardSolvability(board);\n\n    while (!isSolved) {\n        board = shufleBoardFisherYates(board);\n        isSolved = checkBoardSolvability(board);\n    }\n\n    return getBoardWithStatus(board);\n}\n","export default function getDefaultBoard() {\n    const board = Array.from(Array(4), (val, y) => Array.from(Array(4), (item, x) => ({\n        y,\n        x,\n        isRight : true\n    })));\n\n    board[3][3].main = true;\n\n    return board;\n}\n","import React, { useReducer, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport BoardContext from \"./BoardContext\";\nimport getSolvableShuffledBoard from \"../../utils/getSolvableShuffledBoard\";\nimport getDefaultBoard from \"../../utils/getDefaultBoard\";\n\nconst boardActionTypes = {\n    BREAK_GAME : \"BREAK_GAME\",\n    SET_STATE  : \"SET_STATE\",\n    INIT_GAME  : \"INIT_GAME\"\n};\n\nfunction boardReducer(state, action) {\n    const { enabled, board } = action.payload || {};\n\n    switch (action.type) {\n        case boardActionTypes.INIT_GAME:\n            return {\n                enabled : true,\n                board   : getSolvableShuffledBoard(getDefaultBoard())\n            };\n        case boardActionTypes.BREAK_GAME:\n            return {\n                enabled : false,\n                board   : getDefaultBoard()\n            };\n        case boardActionTypes.SET_STATE:\n            return { enabled, board };\n        default:\n            throw new Error();\n    }\n}\n\nfunction BoardProvider({ children }) {\n    const [ state, dispatch ] = useReducer(boardReducer, {\n        enabled : false,\n        board   : getDefaultBoard()\n    });\n    const contextValue = useMemo(\n        () => ({\n            state,\n            dispatch,\n            actionTypes : boardActionTypes\n        }),\n        [ state, dispatch ]\n    );\n\n    return <BoardContext.Provider value={contextValue}>{children}</BoardContext.Provider>;\n}\n\nBoardProvider.propTypes = {\n    children : PropTypes.node.isRequired\n};\n\nexport default BoardProvider;\n","import BoardProvider from \"./BoardProvider\";\n\nexport { default as BoardContext } from \"./BoardContext\";\nexport default BoardProvider;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Swipe as SwipeBase } from \"react-swipe-component\";\n\nfunction Swipe({ children, onChangeGameState }) {\n    const handleSwipeLeftListener = () => onChangeGameState({ keyCode: 37 }); // ---- LEFT -----\n    const handleSwipeDownListener = () => onChangeGameState({ keyCode: 40 }); // ---- TOP ------\n    const handleSwipeRightListener = () => onChangeGameState({ keyCode: 39 }); // ---- RIGHT ---\n    const handleSwipeUpListener = () => onChangeGameState({ keyCode: 38 }); // ---- DOWN -------\n\n    return (\n        <SwipeBase\n            nodeName=\"div\"\n            detectTouch\n            // onSwipeEnd={handleSwipeEnd} ???????????????\n            onSwipedLeft={handleSwipeLeftListener}\n            onSwipedRight={handleSwipeRightListener}\n            onSwipedDown={handleSwipeDownListener}\n            onSwipedUp={handleSwipeUpListener}\n        >\n            {children}\n        </SwipeBase>\n    );\n}\n\nSwipe.propTypes = {\n    children          : PropTypes.node.isRequired,\n    onChangeGameState : PropTypes.func.isRequired\n};\n\nexport default Swipe;\n","import Swipe from \"./Swipe\";\n\nexport default Swipe;\n","export const colors = {\n    Main        : \"darkorange\",\n    Second      : \"white\",\n    Item        : \"#fe9802\",\n    Right       : \"green\",\n    Button      : \"#804600\",\n    ButtonHover : \"#552f00\"\n};\n","import styled from \"styled-components\";\nimport { colors } from \"../../utils/theame\";\n\nconst { Second, Right, Item } = colors;\n\nfunction setBgColor({ state }) {\n    switch (state) {\n        case \"default\":\n            return Item;\n        case \"main\":\n            return Second;\n        case \"right\":\n            return Right;\n        default:\n            break;\n    }\n\n    throw new Error(\"setBgColor Error\");\n}\n\nexport default styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    box-sizing: border-box;\n    width: 25%;\n    height: 25%;\n    border: 2.5px solid white;\n    font-size: 1rem;\n    background-color: ${setBgColor};\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Tile from \"./styles\";\n\nfunction TileComponent({ children, state }) {\n    return <Tile state={state}>{children}</Tile>;\n}\n\nTileComponent.propTypes = {\n    state    : PropTypes.oneOf([ \"default\", \"main\", \"right\" ]).isRequired,\n    children : PropTypes.node.isRequired\n};\n\nexport default TileComponent;\n","import Tile from \"./Tile\";\n\nexport default Tile;\n","import styled from \"styled-components\";\nimport { colors } from \"../../utils/theame\";\n\nconst { Second, Main, Button, ButtonHover } = colors;\n\nexport const Nav = styled.nav`\n    display: flex;\n`;\n\nexport const Btn = styled.button`\n    box-sizing: border-box;\n    border: none;\n    padding: 10px;\n    margin: 15px;\n    background-color: ${Button};\n    color: ${Second};\n    cursor: pointer;\n\n    &:hover {\n        background-color: ${ButtonHover};\n    }\n`;\n\nexport const Container = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-wrap: wrap;\n    user-select: none;\n    width: 40vh;\n    height: 40vh;\n    background-color: ${Second};\n    border: 1px solid ${Main};\n    box-shadow: 2px 2px 10px ${Main};\n`;\n","import React, { useContext, useRef } from \"react\";\n\nimport Swipe from \"../Swipe\";\nimport mapArrowKey from \"../../utils/mapArrowKey\";\nimport Tile from \"../Tile\";\nimport { Container, Btn, Nav } from \"./styles\";\nimport { BoardContext } from \"../Board\";\nimport mapBoard from \"../../utils/mapBoard\";\nimport getBoardWithStatus from \"../../utils/getBoardWithStatus\";\n\nfunction Game() {\n    const containerRef = useRef();\n    const { state, dispatch, actionTypes: boardActionTypes } = useContext(BoardContext);\n\n    const handleStartGame = () => {\n        if (containerRef.current) containerRef.current.focus();\n\n        dispatch({ type: boardActionTypes.INIT_GAME });\n    };\n\n    const handleBreakGame = () => dispatch({ type: boardActionTypes.BREAK_GAME });\n\n    const swapArrayElem = (arr, a, b) => {\n        const newBoard = mapBoard(state.board, (item) => ({ ...item }));\n\n        [ newBoard[a.y][a.x], newBoard[b.y][b.x] ] = [ { ...newBoard[b.y][b.x] }, newBoard[a.y][a.x] ];\n\n        return newBoard;\n    };\n\n    const swapHandler = (offsetX, offsetY) => {\n        let main;\n\n        // eslint-disable-next-line\n        for (let y = 0; y < state.board.length; y++) {\n            // eslint-disable-next-line\n            for (let x = 0; x < state.board[y].length; x++) {\n                if (state.board[y][x].main) {\n                    main = { y, x };\n                    break;\n                }\n            }\n        }\n\n        if (!main) throw new Error(\"findMain error\");\n\n        const item = {\n            x : main.x + offsetX,\n            y : main.y + offsetY\n        };\n\n        if (item.y < 4 && item.y > -1 && item.x < 4 && item.x > -1) {\n            return swapArrayElem(state.board, main, item);\n        }\n\n        return state.board;\n    };\n\n    const swapItems = (key) => mapArrowKey(key, {\n        top    : () => swapHandler(0, -1),\n        bottom : () => swapHandler(0, 1),\n        right  : () => swapHandler(1, 0),\n        left   : () => swapHandler(-1, 0)\n    });\n\n    const handleChangeGameState = (ev) => {\n        if (state.enabled && ev.keyCode <= 40 && ev.keyCode >= 37) {\n            const board = getBoardWithStatus(swapItems(ev.keyCode));\n            const isWin = board.flat(1).every((el) => el.isRight);\n\n            dispatch({\n                type    : boardActionTypes.SET_STATE,\n                payload : { enabled: !isWin, board }\n            });\n\n            // eslint-disable-next-line no-alert\n            if (isWin) alert(\"YOU ARE WIN A GAME!!!\");\n        }\n    };\n\n    const generateItems = () => state.board.map((val) => val.map((item) => {\n        const number = item.x + item.y * 4 + 1;\n\n        let tileState = \"default\";\n\n        if (item.main) tileState = \"main\";\n        else if (item.isRight) tileState = \"right\";\n\n        return (\n            <Tile key={number} state={tileState}>\n                {number}\n            </Tile>\n        );\n    }));\n\n    return (\n        <>\n            <h1>15-puzzle</h1>\n            <Nav>\n                <Btn onClick={handleStartGame}>#shuffleGame</Btn>\n                <Btn onClick={handleBreakGame}>#breakGame</Btn>\n            </Nav>\n            <div>\n                <Swipe onChangeGameState={handleChangeGameState}>\n                    <Container ref={containerRef} onKeyDown={handleChangeGameState} tabIndex=\"0\">\n                        {generateItems()}\n                    </Container>\n                </Swipe>\n            </div>\n        </>\n    );\n}\n\nexport default Game;\n","import Game from \"./Game\";\n\nexport default Game;\n","export default (key, {\n    right,\n    left,\n    top,\n    bottom\n}) => {\n    switch (key) {\n        // ---- LEFT -------\n        case 37:\n            return left();\n\n        // ---- TOP --------\n        case 38:\n            return top();\n\n        // ---- RIGHT ------\n        case 39:\n            return right();\n\n        // ---- DOWN -------\n        case 40:\n            return bottom();\n        default:\n            break;\n    }\n\n    throw new Error(\"mapArrowKey errer\");\n};\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import \"./index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Board from \"./components/Board\";\nimport Game from \"./components/Game\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <Board>\n        <Game />\n    </Board>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}